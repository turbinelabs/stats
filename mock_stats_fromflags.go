// Code generated by MockGen. DO NOT EDIT.
// Source: stats_fromflags.go

// Package stats is a generated GoMock package.
package stats

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// mockStatsFromFlags is a mock of statsFromFlags interface
type mockStatsFromFlags struct {
	ctrl     *gomock.Controller
	recorder *mockStatsFromFlagsMockRecorder
}

// mockStatsFromFlagsMockRecorder is the mock recorder for mockStatsFromFlags
type mockStatsFromFlagsMockRecorder struct {
	mock *mockStatsFromFlags
}

// newMockStatsFromFlags creates a new mock instance
func newMockStatsFromFlags(ctrl *gomock.Controller) *mockStatsFromFlags {
	mock := &mockStatsFromFlags{ctrl: ctrl}
	mock.recorder = &mockStatsFromFlagsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockStatsFromFlags) EXPECT() *mockStatsFromFlagsMockRecorder {
	return m.recorder
}

// Validate mocks base method
func (m *mockStatsFromFlags) Validate() error {
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate
func (mr *mockStatsFromFlagsMockRecorder) Validate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*mockStatsFromFlags)(nil).Validate))
}

// Make mocks base method
func (m *mockStatsFromFlags) Make() (Stats, error) {
	ret := m.ctrl.Call(m, "Make")
	ret0, _ := ret[0].(Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Make indicates an expected call of Make
func (mr *mockStatsFromFlagsMockRecorder) Make() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*mockStatsFromFlags)(nil).Make))
}
