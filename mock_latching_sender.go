// Automatically generated by MockGen. DO NOT EDIT!
// Source: latching_sender.go

package stats

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of latchableSender interface
type mockLatchableSender struct {
	ctrl     *gomock.Controller
	recorder *_MockLatchableSenderRecorder
}

// Recorder for mockLatchableSender (not exported)
type _MockLatchableSenderRecorder struct {
	mock *mockLatchableSender
}

func newMockLatchableSender(ctrl *gomock.Controller) *mockLatchableSender {
	mock := &mockLatchableSender{ctrl: ctrl}
	mock.recorder = &_MockLatchableSenderRecorder{mock}
	return mock
}

func (_m *mockLatchableSender) EXPECT() *_MockLatchableSenderRecorder {
	return _m.recorder
}

func (_m *mockLatchableSender) Gauge(stat string, value float64, tags ...string) {
	_s := []interface{}{stat, value}
	for _, _x := range tags {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Gauge", _s...)
}

func (_mr *_MockLatchableSenderRecorder) Gauge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Gauge", _s...)
}

func (_m *mockLatchableSender) Count(stat string, count float64, tags ...string) {
	_s := []interface{}{stat, count}
	for _, _x := range tags {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Count", _s...)
}

func (_mr *_MockLatchableSenderRecorder) Count(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Count", _s...)
}

func (_m *mockLatchableSender) Histogram(stat string, value float64, tags ...string) {
	_s := []interface{}{stat, value}
	for _, _x := range tags {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Histogram", _s...)
}

func (_mr *_MockLatchableSenderRecorder) Histogram(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Histogram", _s...)
}

func (_m *mockLatchableSender) Timing(stat string, value time.Duration, tags ...string) {
	_s := []interface{}{stat, value}
	for _, _x := range tags {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Timing", _s...)
}

func (_mr *_MockLatchableSenderRecorder) Timing(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Timing", _s...)
}

func (_m *mockLatchableSender) LatchedHistogram(_param0 string, _param1 LatchedHistogram, _param2 ...string) {
	_s := []interface{}{_param0, _param1}
	for _, _x := range _param2 {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "LatchedHistogram", _s...)
}

func (_mr *_MockLatchableSenderRecorder) LatchedHistogram(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LatchedHistogram", _s...)
}
