// Automatically generated by MockGen. DO NOT EDIT!
// Source: stats.go

package stats

import (
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of Stats interface
type MockStats struct {
	ctrl     *gomock.Controller
	recorder *_MockStatsRecorder
}

// Recorder for MockStats (not exported)
type _MockStatsRecorder struct {
	mock *MockStats
}

func NewMockStats(ctrl *gomock.Controller) *MockStats {
	mock := &MockStats{ctrl: ctrl}
	mock.recorder = &_MockStatsRecorder{mock}
	return mock
}

func (_m *MockStats) EXPECT() *_MockStatsRecorder {
	return _m.recorder
}

func (_m *MockStats) Gauge(stat string, value float64, tags ...Tag) {
	_s := []interface{}{stat, value}
	for _, _x := range tags {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Gauge", _s...)
}

func (_mr *_MockStatsRecorder) Gauge(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Gauge", _s...)
}

func (_m *MockStats) Count(stat string, count float64, tags ...Tag) {
	_s := []interface{}{stat, count}
	for _, _x := range tags {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Count", _s...)
}

func (_mr *_MockStatsRecorder) Count(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Count", _s...)
}

func (_m *MockStats) Histogram(stat string, value float64, tags ...Tag) {
	_s := []interface{}{stat, value}
	for _, _x := range tags {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Histogram", _s...)
}

func (_mr *_MockStatsRecorder) Histogram(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Histogram", _s...)
}

func (_m *MockStats) Timing(stat string, value time.Duration, tags ...Tag) {
	_s := []interface{}{stat, value}
	for _, _x := range tags {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "Timing", _s...)
}

func (_mr *_MockStatsRecorder) Timing(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Timing", _s...)
}

func (_m *MockStats) AddTags(tags ...Tag) {
	_s := []interface{}{}
	for _, _x := range tags {
		_s = append(_s, _x)
	}
	_m.ctrl.Call(_m, "AddTags", _s...)
}

func (_mr *_MockStatsRecorder) AddTags(arg0 ...interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTags", arg0...)
}

func (_m *MockStats) Scope(scope string, scopes ...string) Stats {
	_s := []interface{}{scope}
	for _, _x := range scopes {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Scope", _s...)
	ret0, _ := ret[0].(Stats)
	return ret0
}

func (_mr *_MockStatsRecorder) Scope(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0}, arg1...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Scope", _s...)
}

func (_m *MockStats) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStatsRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}
