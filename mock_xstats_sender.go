// Code generated by MockGen. DO NOT EDIT.
// Source: xstats_sender.go

package stats

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// mockXstatsSender is a mock of xstatsSender interface
type mockXstatsSender struct {
	ctrl     *gomock.Controller
	recorder *mockXstatsSenderMockRecorder
}

// mockXstatsSenderMockRecorder is the mock recorder for mockXstatsSender
type mockXstatsSenderMockRecorder struct {
	mock *mockXstatsSender
}

// newMockXstatsSender creates a new mock instance
func newMockXstatsSender(ctrl *gomock.Controller) *mockXstatsSender {
	mock := &mockXstatsSender{ctrl: ctrl}
	mock.recorder = &mockXstatsSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *mockXstatsSender) EXPECT() *mockXstatsSenderMockRecorder {
	return m.recorder
}

// Gauge mocks base method
func (m *mockXstatsSender) Gauge(stat string, value float64, tags ...string) {
	varargs := []interface{}{stat, value}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Gauge", varargs...)
}

// Gauge indicates an expected call of Gauge
func (mr *mockXstatsSenderMockRecorder) Gauge(stat, value interface{}, tags ...interface{}) *gomock.Call {
	varargs := append([]interface{}{stat, value}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*mockXstatsSender)(nil).Gauge), varargs...)
}

// Count mocks base method
func (m *mockXstatsSender) Count(stat string, count float64, tags ...string) {
	varargs := []interface{}{stat, count}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Count", varargs...)
}

// Count indicates an expected call of Count
func (mr *mockXstatsSenderMockRecorder) Count(stat, count interface{}, tags ...interface{}) *gomock.Call {
	varargs := append([]interface{}{stat, count}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*mockXstatsSender)(nil).Count), varargs...)
}

// Histogram mocks base method
func (m *mockXstatsSender) Histogram(stat string, value float64, tags ...string) {
	varargs := []interface{}{stat, value}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Histogram", varargs...)
}

// Histogram indicates an expected call of Histogram
func (mr *mockXstatsSenderMockRecorder) Histogram(stat, value interface{}, tags ...interface{}) *gomock.Call {
	varargs := append([]interface{}{stat, value}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*mockXstatsSender)(nil).Histogram), varargs...)
}

// Timing mocks base method
func (m *mockXstatsSender) Timing(stat string, value time.Duration, tags ...string) {
	varargs := []interface{}{stat, value}
	for _, a := range tags {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Timing", varargs...)
}

// Timing indicates an expected call of Timing
func (mr *mockXstatsSenderMockRecorder) Timing(stat, value interface{}, tags ...interface{}) *gomock.Call {
	varargs := append([]interface{}{stat, value}, tags...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timing", reflect.TypeOf((*mockXstatsSender)(nil).Timing), varargs...)
}
