// Automatically generated by MockGen. DO NOT EDIT!
// Source: metrics_collector.go

package handler

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/turbinelabs/api"
	stats "github.com/turbinelabs/stats"
	http "net/http"
)

// Mock of MetricsCollector interface
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *_MockMetricsCollectorRecorder
}

// Recorder for MockMetricsCollector (not exported)
type _MockMetricsCollectorRecorder struct {
	mock *MockMetricsCollector
}

func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &_MockMetricsCollectorRecorder{mock}
	return mock
}

func (_m *MockMetricsCollector) EXPECT() *_MockMetricsCollectorRecorder {
	return _m.recorder
}

func (_m *MockMetricsCollector) Forward(_param0 api.OrgKey, _param1 *stats.StatsPayload) (int, error) {
	ret := _m.ctrl.Call(_m, "Forward", _param0, _param1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockMetricsCollectorRecorder) Forward(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Forward", arg0, arg1)
}

func (_m *MockMetricsCollector) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockMetricsCollector) AsHandler() http.HandlerFunc {
	ret := _m.ctrl.Call(_m, "AsHandler")
	ret0, _ := ret[0].(http.HandlerFunc)
	return ret0
}

func (_mr *_MockMetricsCollectorRecorder) AsHandler() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AsHandler")
}
