// Automatically generated by MockGen. DO NOT EDIT!
// Source: auth_fromflags.go

package handler

import (
	gomock "github.com/golang/mock/gomock"
	handler "github.com/turbinelabs/server/handler"
	log "log"
)

// Mock of AuthorizerFromFlags interface
type MockAuthorizerFromFlags struct {
	ctrl     *gomock.Controller
	recorder *_MockAuthorizerFromFlagsRecorder
}

// Recorder for MockAuthorizerFromFlags (not exported)
type _MockAuthorizerFromFlagsRecorder struct {
	mock *MockAuthorizerFromFlags
}

func NewMockAuthorizerFromFlags(ctrl *gomock.Controller) *MockAuthorizerFromFlags {
	mock := &MockAuthorizerFromFlags{ctrl: ctrl}
	mock.recorder = &_MockAuthorizerFromFlagsRecorder{mock}
	return mock
}

func (_m *MockAuthorizerFromFlags) EXPECT() *_MockAuthorizerFromFlagsRecorder {
	return _m.recorder
}

func (_m *MockAuthorizerFromFlags) Validate() error {
	ret := _m.ctrl.Call(_m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAuthorizerFromFlagsRecorder) Validate() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate")
}

func (_m *MockAuthorizerFromFlags) Make(_param0 *log.Logger) (handler.Authorizer, error) {
	ret := _m.ctrl.Call(_m, "Make", _param0)
	ret0, _ := ret[0].(handler.Authorizer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAuthorizerFromFlagsRecorder) Make(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Make", arg0)
}
