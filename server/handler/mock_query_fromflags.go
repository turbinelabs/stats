// Automatically generated by MockGen. DO NOT EDIT!
// Source: query_fromflags.go

package handler

import (
	gomock "github.com/golang/mock/gomock"
	log "log"
)

// Mock of QueryHandlerFromFlags interface
type MockQueryHandlerFromFlags struct {
	ctrl     *gomock.Controller
	recorder *_MockQueryHandlerFromFlagsRecorder
}

// Recorder for MockQueryHandlerFromFlags (not exported)
type _MockQueryHandlerFromFlagsRecorder struct {
	mock *MockQueryHandlerFromFlags
}

func NewMockQueryHandlerFromFlags(ctrl *gomock.Controller) *MockQueryHandlerFromFlags {
	mock := &MockQueryHandlerFromFlags{ctrl: ctrl}
	mock.recorder = &_MockQueryHandlerFromFlagsRecorder{mock}
	return mock
}

func (_m *MockQueryHandlerFromFlags) EXPECT() *_MockQueryHandlerFromFlagsRecorder {
	return _m.recorder
}

func (_m *MockQueryHandlerFromFlags) Validate(useMockData bool) error {
	ret := _m.ctrl.Call(_m, "Validate", useMockData)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockQueryHandlerFromFlagsRecorder) Validate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Validate", arg0)
}

func (_m *MockQueryHandlerFromFlags) Make(log *log.Logger, verboseLogging bool, useMockData bool) (QueryHandler, error) {
	ret := _m.ctrl.Call(_m, "Make", log, verboseLogging, useMockData)
	ret0, _ := ret[0].(QueryHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockQueryHandlerFromFlagsRecorder) Make(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Make", arg0, arg1, arg2)
}
